/* automatically generated by rust-bindgen 0.66.1 */

pub const REDISMODULE_OK: isize = 0;
pub const REDISMODULE_ERR: isize = 1;
pub const REDISMODULE_AUTH_HANDLED: u32 = 0;
pub const REDISMODULE_AUTH_NOT_HANDLED: u32 = 1;
pub const REDISMODULE_APIVER_1: u32 = 1;
pub const REDISMODULE_TYPE_METHOD_VERSION: u32 = 5;
pub const REDISMODULE_READ: u32 = 1;
pub const REDISMODULE_WRITE: u32 = 2;
pub const REDISMODULE_OPEN_KEY_NOTOUCH: u32 = 65536;
pub const REDISMODULE_OPEN_KEY_NONOTIFY: u32 = 131072;
pub const REDISMODULE_OPEN_KEY_NOSTATS: u32 = 262144;
pub const REDISMODULE_OPEN_KEY_NOEXPIRE: u32 = 524288;
pub const REDISMODULE_OPEN_KEY_NOEFFECTS: u32 = 1048576;
pub const REDISMODULE_LIST_HEAD: isize = 0;
pub const REDISMODULE_LIST_TAIL: isize = 1;
pub const REDISMODULE_KEYTYPE_EMPTY: isize = 0;
pub const REDISMODULE_KEYTYPE_STRING: isize = 1;
pub const REDISMODULE_KEYTYPE_LIST: isize = 2;
pub const REDISMODULE_KEYTYPE_HASH: isize = 3;
pub const REDISMODULE_KEYTYPE_SET: isize = 4;
pub const REDISMODULE_KEYTYPE_ZSET: isize = 5;
pub const REDISMODULE_KEYTYPE_MODULE: isize = 6;
pub const REDISMODULE_KEYTYPE_STREAM: isize = 7;
pub const REDISMODULE_REPLY_UNKNOWN: isize = -1;
pub const REDISMODULE_REPLY_STRING: isize = 0;
pub const REDISMODULE_REPLY_ERROR: isize = 1;
pub const REDISMODULE_REPLY_INTEGER: isize = 2;
pub const REDISMODULE_REPLY_ARRAY: isize = 3;
pub const REDISMODULE_REPLY_NULL: isize = 4;
pub const REDISMODULE_REPLY_MAP: isize = 5;
pub const REDISMODULE_REPLY_SET: isize = 6;
pub const REDISMODULE_REPLY_BOOL: isize = 7;
pub const REDISMODULE_REPLY_DOUBLE: isize = 8;
pub const REDISMODULE_REPLY_BIG_NUMBER: isize = 9;
pub const REDISMODULE_REPLY_VERBATIM_STRING: isize = 10;
pub const REDISMODULE_REPLY_ATTRIBUTE: isize = 11;
pub const REDISMODULE_REPLY_PROMISE: isize = 12;
pub const REDISMODULE_POSTPONED_ARRAY_LEN: i32 = -1;
pub const REDISMODULE_POSTPONED_LEN: i32 = -1;
pub const REDISMODULE_NO_EXPIRE: i32 = -1;
pub const REDISMODULE_ZADD_XX: u32 = 1;
pub const REDISMODULE_ZADD_NX: u32 = 2;
pub const REDISMODULE_ZADD_ADDED: u32 = 4;
pub const REDISMODULE_ZADD_UPDATED: u32 = 8;
pub const REDISMODULE_ZADD_NOP: u32 = 16;
pub const REDISMODULE_ZADD_GT: u32 = 32;
pub const REDISMODULE_ZADD_LT: u32 = 64;
pub const REDISMODULE_HASH_NONE: u32 = 0;
pub const REDISMODULE_HASH_NX: u32 = 1;
pub const REDISMODULE_HASH_XX: u32 = 2;
pub const REDISMODULE_HASH_CFIELDS: u32 = 4;
pub const REDISMODULE_HASH_EXISTS: u32 = 8;
pub const REDISMODULE_HASH_COUNT_ALL: u32 = 16;
pub const REDISMODULE_CONFIG_DEFAULT: u32 = 0;
pub const REDISMODULE_CONFIG_IMMUTABLE: u32 = 1;
pub const REDISMODULE_CONFIG_SENSITIVE: u32 = 2;
pub const REDISMODULE_CONFIG_HIDDEN: u32 = 16;
pub const REDISMODULE_CONFIG_PROTECTED: u32 = 32;
pub const REDISMODULE_CONFIG_DENY_LOADING: u32 = 64;
pub const REDISMODULE_CONFIG_MEMORY: u32 = 128;
pub const REDISMODULE_CONFIG_BITFLAGS: u32 = 256;
pub const REDISMODULE_STREAM_ADD_AUTOID: u32 = 1;
pub const REDISMODULE_STREAM_ITERATOR_EXCLUSIVE: u32 = 1;
pub const REDISMODULE_STREAM_ITERATOR_REVERSE: u32 = 2;
pub const REDISMODULE_STREAM_TRIM_APPROX: u32 = 1;
pub const REDISMODULE_CTX_FLAGS_LUA: u32 = 1;
pub const REDISMODULE_CTX_FLAGS_MULTI: u32 = 2;
pub const REDISMODULE_CTX_FLAGS_MASTER: u32 = 4;
pub const REDISMODULE_CTX_FLAGS_SLAVE: u32 = 8;
pub const REDISMODULE_CTX_FLAGS_READONLY: u32 = 16;
pub const REDISMODULE_CTX_FLAGS_CLUSTER: u32 = 32;
pub const REDISMODULE_CTX_FLAGS_AOF: u32 = 64;
pub const REDISMODULE_CTX_FLAGS_RDB: u32 = 128;
pub const REDISMODULE_CTX_FLAGS_MAXMEMORY: u32 = 256;
pub const REDISMODULE_CTX_FLAGS_EVICT: u32 = 512;
pub const REDISMODULE_CTX_FLAGS_OOM: u32 = 1024;
pub const REDISMODULE_CTX_FLAGS_OOM_WARNING: u32 = 2048;
pub const REDISMODULE_CTX_FLAGS_REPLICATED: u32 = 4096;
pub const REDISMODULE_CTX_FLAGS_LOADING: u32 = 8192;
pub const REDISMODULE_CTX_FLAGS_REPLICA_IS_STALE: u32 = 16384;
pub const REDISMODULE_CTX_FLAGS_REPLICA_IS_CONNECTING: u32 = 32768;
pub const REDISMODULE_CTX_FLAGS_REPLICA_IS_TRANSFERRING: u32 = 65536;
pub const REDISMODULE_CTX_FLAGS_REPLICA_IS_ONLINE: u32 = 131072;
pub const REDISMODULE_CTX_FLAGS_ACTIVE_CHILD: u32 = 262144;
pub const REDISMODULE_CTX_FLAGS_MULTI_DIRTY: u32 = 524288;
pub const REDISMODULE_CTX_FLAGS_IS_CHILD: u32 = 1048576;
pub const REDISMODULE_CTX_FLAGS_DENY_BLOCKING: u32 = 2097152;
pub const REDISMODULE_CTX_FLAGS_RESP3: u32 = 4194304;
pub const REDISMODULE_CTX_FLAGS_ASYNC_LOADING: u32 = 8388608;
pub const REDISMODULE_CTX_FLAGS_SERVER_STARTUP: u32 = 16777216;
pub const REDISMODULE_NOTIFY_KEYSPACE: ::std::os::raw::c_int = 1;
pub const REDISMODULE_NOTIFY_KEYEVENT: ::std::os::raw::c_int = 2;
pub const REDISMODULE_NOTIFY_GENERIC: ::std::os::raw::c_int = 4;
pub const REDISMODULE_NOTIFY_STRING: ::std::os::raw::c_int = 8;
pub const REDISMODULE_NOTIFY_LIST: ::std::os::raw::c_int = 16;
pub const REDISMODULE_NOTIFY_SET: ::std::os::raw::c_int = 32;
pub const REDISMODULE_NOTIFY_HASH: ::std::os::raw::c_int = 64;
pub const REDISMODULE_NOTIFY_ZSET: ::std::os::raw::c_int = 128;
pub const REDISMODULE_NOTIFY_EXPIRED: ::std::os::raw::c_int = 256;
pub const REDISMODULE_NOTIFY_EVICTED: ::std::os::raw::c_int = 512;
pub const REDISMODULE_NOTIFY_STREAM: ::std::os::raw::c_int = 1024;
pub const REDISMODULE_NOTIFY_KEY_MISS: ::std::os::raw::c_int = 2048;
pub const REDISMODULE_NOTIFY_LOADED: ::std::os::raw::c_int = 4096;
pub const REDISMODULE_NOTIFY_MODULE: ::std::os::raw::c_int = 8192;
pub const REDISMODULE_NOTIFY_NEW: ::std::os::raw::c_int = 16384;
pub const REDISMODULE_NOTIFY_TRIMMED: ::std::os::raw::c_int = 1073741824;
pub const REDISMODULE_NOTIFY_ALL: ::std::os::raw::c_int = 10236;
pub const REDISMODULE_ERRORMSG_WRONGTYPE: &[u8; 66] =
    b"WRONGTYPE Operation against a key holding the wrong kind of value\0";
pub const REDISMODULE_POSITIVE_INFINITE: f64 = ::std::f64::INFINITY;
pub const REDISMODULE_NEGATIVE_INFINITE: f64 = ::std::f64::NEG_INFINITY;
pub const REDISMODULE_NODE_ID_LEN: u32 = 40;
pub const REDISMODULE_NODE_MYSELF: u32 = 1;
pub const REDISMODULE_NODE_MASTER: u32 = 2;
pub const REDISMODULE_NODE_SLAVE: u32 = 4;
pub const REDISMODULE_NODE_PFAIL: u32 = 8;
pub const REDISMODULE_NODE_FAIL: u32 = 16;
pub const REDISMODULE_NODE_NOFAILOVER: u32 = 32;
pub const REDISMODULE_CLUSTER_FLAG_NONE: u32 = 0;
pub const REDISMODULE_CLUSTER_FLAG_NO_FAILOVER: u32 = 2;
pub const REDISMODULE_CLUSTER_FLAG_NO_REDIRECTION: u32 = 4;
pub const REDISMODULE_LOGLEVEL_DEBUG: &[u8; 6] = b"debug\0";
pub const REDISMODULE_LOGLEVEL_VERBOSE: &[u8; 8] = b"verbose\0";
pub const REDISMODULE_LOGLEVEL_NOTICE: &[u8; 7] = b"notice\0";
pub const REDISMODULE_LOGLEVEL_WARNING: &[u8; 8] = b"warning\0";
pub const REDISMODULE_AUX_BEFORE_RDB: isize = 1;
pub const REDISMODULE_AUX_AFTER_RDB: isize = 2;
pub const REDISMODULE_YIELD_FLAG_NONE: u32 = 1;
pub const REDISMODULE_YIELD_FLAG_CLIENTS: u32 = 2;
pub const REDISMODULE_BLOCK_UNBLOCK_DEFAULT: u32 = 0;
pub const REDISMODULE_BLOCK_UNBLOCK_DELETED: u32 = 1;
pub const REDISMODULE_CMDFILTER_NOSELF: u32 = 1;
pub const REDISMODULE_OPTIONS_HANDLE_IO_ERRORS: u32 = 1;
pub const REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED: u32 = 2;
pub const REDISMODULE_OPTIONS_HANDLE_REPL_ASYNC_LOAD: u32 = 4;
pub const REDISMODULE_OPTIONS_ALLOW_NESTED_KEYSPACE_NOTIFICATIONS: u32 = 8;
pub const REDISMODULE_CMD_ARG_NONE: u32 = 0;
pub const REDISMODULE_CMD_ARG_OPTIONAL: u32 = 1;
pub const REDISMODULE_CMD_ARG_MULTIPLE: u32 = 2;
pub const REDISMODULE_CMD_ARG_MULTIPLE_TOKEN: u32 = 4;
pub const REDISMODULE_CMD_KEY_RO: u32 = 1;
pub const REDISMODULE_CMD_KEY_RW: u32 = 2;
pub const REDISMODULE_CMD_KEY_OW: u32 = 4;
pub const REDISMODULE_CMD_KEY_RM: u32 = 8;
pub const REDISMODULE_CMD_KEY_ACCESS: u32 = 16;
pub const REDISMODULE_CMD_KEY_UPDATE: u32 = 32;
pub const REDISMODULE_CMD_KEY_INSERT: u32 = 64;
pub const REDISMODULE_CMD_KEY_DELETE: u32 = 128;
pub const REDISMODULE_CMD_KEY_NOT_KEY: u32 = 256;
pub const REDISMODULE_CMD_KEY_INCOMPLETE: u32 = 512;
pub const REDISMODULE_CMD_KEY_VARIABLE_FLAGS: u32 = 1024;
pub const REDISMODULE_CMD_CHANNEL_PATTERN: u32 = 1;
pub const REDISMODULE_CMD_CHANNEL_PUBLISH: u32 = 2;
pub const REDISMODULE_CMD_CHANNEL_SUBSCRIBE: u32 = 4;
pub const REDISMODULE_CMD_CHANNEL_UNSUBSCRIBE: u32 = 8;
pub const REDISMODULE_EVENTLOOP_READABLE: u32 = 1;
pub const REDISMODULE_EVENTLOOP_WRITABLE: u32 = 2;
pub const REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED: u64 = 0;
pub const REDISMODULE_EVENT_PERSISTENCE: u64 = 1;
pub const REDISMODULE_EVENT_FLUSHDB: u64 = 2;
pub const REDISMODULE_EVENT_LOADING: u64 = 3;
pub const REDISMODULE_EVENT_CLIENT_CHANGE: u64 = 4;
pub const REDISMODULE_EVENT_SHUTDOWN: u64 = 5;
pub const REDISMODULE_EVENT_REPLICA_CHANGE: u64 = 6;
pub const REDISMODULE_EVENT_MASTER_LINK_CHANGE: u64 = 7;
pub const REDISMODULE_EVENT_CRON_LOOP: u64 = 8;
pub const REDISMODULE_EVENT_MODULE_CHANGE: u64 = 9;
pub const REDISMODULE_EVENT_LOADING_PROGRESS: u64 = 10;
pub const REDISMODULE_EVENT_SWAPDB: u64 = 11;
pub const REDISMODULE_EVENT_REPL_BACKUP: u64 = 12;
pub const REDISMODULE_EVENT_FORK_CHILD: u64 = 13;
pub const REDISMODULE_EVENT_REPL_ASYNC_LOAD: u64 = 14;
pub const REDISMODULE_EVENT_EVENTLOOP: u64 = 15;
pub const REDISMODULE_EVENT_CONFIG: u64 = 16;
pub const REDISMODULE_EVENT_KEY: u64 = 17;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START: u64 = 0;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START: u64 = 1;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START: u64 = 2;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_ENDED: u64 = 3;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_FAILED: u64 = 4;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_AOF_START: u64 = 5;
pub const REDISMODULE_SUBEVENT_LOADING_RDB_START: u64 = 0;
pub const REDISMODULE_SUBEVENT_LOADING_AOF_START: u64 = 1;
pub const REDISMODULE_SUBEVENT_LOADING_REPL_START: u64 = 2;
pub const REDISMODULE_SUBEVENT_LOADING_ENDED: u64 = 3;
pub const REDISMODULE_SUBEVENT_LOADING_FAILED: u64 = 4;
pub const REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED: u64 = 0;
pub const REDISMODULE_SUBEVENT_CLIENT_CHANGE_DISCONNECTED: u64 = 1;
pub const REDISMODULE_SUBEVENT_MASTER_LINK_UP: u64 = 0;
pub const REDISMODULE_SUBEVENT_MASTER_LINK_DOWN: u64 = 1;
pub const REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE: u64 = 0;
pub const REDISMODULE_SUBEVENT_REPLICA_CHANGE_OFFLINE: u64 = 1;
pub const REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER: u64 = 0;
pub const REDISMODULE_EVENT_REPLROLECHANGED_NOW_REPLICA: u64 = 1;
pub const REDISMODULE_SUBEVENT_FLUSHDB_START: u64 = 0;
pub const REDISMODULE_SUBEVENT_FLUSHDB_END: u64 = 1;
pub const REDISMODULE_SUBEVENT_MODULE_LOADED: u64 = 0;
pub const REDISMODULE_SUBEVENT_MODULE_UNLOADED: u64 = 1;
pub const REDISMODULE_SUBEVENT_CONFIG_CHANGE: u64 = 0;
pub const REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB: u64 = 0;
pub const REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF: u64 = 1;
pub const REDISMODULE_SUBEVENT_REPL_BACKUP_CREATE: u64 = 0;
pub const REDISMODULE_SUBEVENT_REPL_BACKUP_RESTORE: u64 = 1;
pub const REDISMODULE_SUBEVENT_REPL_BACKUP_DISCARD: u64 = 2;
pub const REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_STARTED: u64 = 0;
pub const REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_ABORTED: u64 = 1;
pub const REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_COMPLETED: u64 = 2;
pub const REDISMODULE_SUBEVENT_FORK_CHILD_BORN: u64 = 0;
pub const REDISMODULE_SUBEVENT_FORK_CHILD_DIED: u64 = 1;
pub const REDISMODULE_SUBEVENT_EVENTLOOP_BEFORE_SLEEP: u64 = 0;
pub const REDISMODULE_SUBEVENT_EVENTLOOP_AFTER_SLEEP: u64 = 1;
pub const REDISMODULE_SUBEVENT_KEY_DELETED: u64 = 0;
pub const REDISMODULE_SUBEVENT_KEY_EXPIRED: u64 = 1;
pub const REDISMODULE_SUBEVENT_KEY_EVICTED: u64 = 2;
pub const REDISMODULE_SUBEVENT_KEY_OVERWRITTEN: u64 = 3;
pub const REDISMODULE_CLIENTINFO_FLAG_SSL: u32 = 1;
pub const REDISMODULE_CLIENTINFO_FLAG_PUBSUB: u32 = 2;
pub const REDISMODULE_CLIENTINFO_FLAG_BLOCKED: u32 = 4;
pub const REDISMODULE_CLIENTINFO_FLAG_TRACKING: u32 = 8;
pub const REDISMODULE_CLIENTINFO_FLAG_UNIXSOCKET: u32 = 16;
pub const REDISMODULE_CLIENTINFO_FLAG_MULTI: u32 = 32;
pub const REDISMODULE_CLIENTINFO_VERSION: u32 = 1;
pub const REDISMODULE_REPLICATIONINFO_VERSION: u32 = 1;
pub const REDISMODULE_FLUSHINFO_VERSION: u32 = 1;
pub const REDISMODULE_MODULE_CHANGE_VERSION: u32 = 1;
pub const REDISMODULE_CONFIGCHANGE_VERSION: u32 = 1;
pub const REDISMODULE_CRON_LOOP_VERSION: u32 = 1;
pub const REDISMODULE_LOADING_PROGRESS_VERSION: u32 = 1;
pub const REDISMODULE_SWAPDBINFO_VERSION: u32 = 1;
pub const REDISMODULE_KEYINFO_VERSION: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleString {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleKey {
    _unused: [u8; 0],
}
pub type mstime_t = ::std::os::raw::c_longlong;
pub type ustime_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleStreamID {
    pub ms: u64,
    pub seq: u64,
}
#[test]
fn bindgen_test_layout_RedisModuleStreamID() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleStreamID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleStreamID>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleStreamID))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleStreamID>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleStreamID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleStreamID),
            "::",
            stringify!(ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleStreamID),
            "::",
            stringify!(seq)
        )
    );
}
pub type RedisModuleTimerID = u64;
pub const RedisModuleCommandArgType_REDISMODULE_ARG_TYPE_STRING: RedisModuleCommandArgType = 0;
pub const RedisModuleCommandArgType_REDISMODULE_ARG_TYPE_INTEGER: RedisModuleCommandArgType = 1;
pub const RedisModuleCommandArgType_REDISMODULE_ARG_TYPE_DOUBLE: RedisModuleCommandArgType = 2;
pub const RedisModuleCommandArgType_REDISMODULE_ARG_TYPE_KEY: RedisModuleCommandArgType = 3;
pub const RedisModuleCommandArgType_REDISMODULE_ARG_TYPE_PATTERN: RedisModuleCommandArgType = 4;
pub const RedisModuleCommandArgType_REDISMODULE_ARG_TYPE_UNIX_TIME: RedisModuleCommandArgType = 5;
pub const RedisModuleCommandArgType_REDISMODULE_ARG_TYPE_PURE_TOKEN: RedisModuleCommandArgType = 6;
pub const RedisModuleCommandArgType_REDISMODULE_ARG_TYPE_ONEOF: RedisModuleCommandArgType = 7;
pub const RedisModuleCommandArgType_REDISMODULE_ARG_TYPE_BLOCK: RedisModuleCommandArgType = 8;
pub type RedisModuleCommandArgType = ::std::os::raw::c_uint;
pub const RedisModuleKeySpecBeginSearchType_REDISMODULE_KSPEC_BS_INVALID:
    RedisModuleKeySpecBeginSearchType = 0;
pub const RedisModuleKeySpecBeginSearchType_REDISMODULE_KSPEC_BS_UNKNOWN:
    RedisModuleKeySpecBeginSearchType = 1;
pub const RedisModuleKeySpecBeginSearchType_REDISMODULE_KSPEC_BS_INDEX:
    RedisModuleKeySpecBeginSearchType = 2;
pub const RedisModuleKeySpecBeginSearchType_REDISMODULE_KSPEC_BS_KEYWORD:
    RedisModuleKeySpecBeginSearchType = 3;
pub type RedisModuleKeySpecBeginSearchType = ::std::os::raw::c_uint;
pub const RedisModuleKeySpecFindKeysType_REDISMODULE_KSPEC_FK_OMITTED:
    RedisModuleKeySpecFindKeysType = 0;
pub const RedisModuleKeySpecFindKeysType_REDISMODULE_KSPEC_FK_UNKNOWN:
    RedisModuleKeySpecFindKeysType = 1;
pub const RedisModuleKeySpecFindKeysType_REDISMODULE_KSPEC_FK_RANGE:
    RedisModuleKeySpecFindKeysType = 2;
pub const RedisModuleKeySpecFindKeysType_REDISMODULE_KSPEC_FK_KEYNUM:
    RedisModuleKeySpecFindKeysType = 3;
pub type RedisModuleKeySpecFindKeysType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandArg {
    pub name: *const ::std::os::raw::c_char,
    pub type_: RedisModuleCommandArgType,
    pub key_spec_index: ::std::os::raw::c_int,
    pub token: *const ::std::os::raw::c_char,
    pub summary: *const ::std::os::raw::c_char,
    pub since: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub deprecated_since: *const ::std::os::raw::c_char,
    pub subargs: *mut RedisModuleCommandArg,
    pub display_text: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RedisModuleCommandArg() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandArg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandArg>(),
        72usize,
        concat!("Size of: ", stringify!(RedisModuleCommandArg))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandArg>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleCommandArg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_spec_index) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(key_spec_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).summary) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(summary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).since) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(since)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deprecated_since) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(deprecated_since)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subargs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(subargs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_text) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandArg),
            "::",
            stringify!(display_text)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandHistoryEntry {
    pub since: *const ::std::os::raw::c_char,
    pub changes: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RedisModuleCommandHistoryEntry() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandHistoryEntry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandHistoryEntry>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleCommandHistoryEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandHistoryEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleCommandHistoryEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).since) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandHistoryEntry),
            "::",
            stringify!(since)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandHistoryEntry),
            "::",
            stringify!(changes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RedisModuleCommandKeySpec {
    pub notes: *const ::std::os::raw::c_char,
    pub flags: u64,
    pub begin_search_type: RedisModuleKeySpecBeginSearchType,
    pub bs: RedisModuleCommandKeySpec__bindgen_ty_1,
    pub find_keys_type: RedisModuleKeySpecFindKeysType,
    pub fk: RedisModuleCommandKeySpec__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RedisModuleCommandKeySpec__bindgen_ty_1 {
    pub index: RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_1,
    pub keyword: RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_1 {
    pub pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2 {
    pub keyword: *const ::std::os::raw::c_char,
    pub startfrom: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyword) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(keyword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startfrom) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(startfrom)
        )
    );
}
#[test]
fn bindgen_test_layout_RedisModuleCommandKeySpec__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandKeySpec__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandKeySpec__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandKeySpec__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyword) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_1),
            "::",
            stringify!(keyword)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RedisModuleCommandKeySpec__bindgen_ty_2 {
    pub range: RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1,
    pub keynum: RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1 {
    pub lastkey: ::std::os::raw::c_int,
    pub keystep: ::std::os::raw::c_int,
    pub limit: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(lastkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keystep) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(keystep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(limit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2 {
    pub keynumidx: ::std::os::raw::c_int,
    pub firstkey: ::std::os::raw::c_int,
    pub keystep: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keynumidx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(keynumidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstkey) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(firstkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keystep) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(keystep)
        )
    );
}
#[test]
fn bindgen_test_layout_RedisModuleCommandKeySpec__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandKeySpec__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandKeySpec__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandKeySpec__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keynum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec__bindgen_ty_2),
            "::",
            stringify!(keynum)
        )
    );
}
#[test]
fn bindgen_test_layout_RedisModuleCommandKeySpec() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandKeySpec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandKeySpec>(),
        56usize,
        concat!("Size of: ", stringify!(RedisModuleCommandKeySpec))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandKeySpec>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleCommandKeySpec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec),
            "::",
            stringify!(notes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin_search_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec),
            "::",
            stringify!(begin_search_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec),
            "::",
            stringify!(bs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).find_keys_type) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec),
            "::",
            stringify!(find_keys_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fk) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandKeySpec),
            "::",
            stringify!(fk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandInfoVersion {
    pub version: ::std::os::raw::c_int,
    pub sizeof_historyentry: usize,
    pub sizeof_keyspec: usize,
    pub sizeof_arg: usize,
}
#[test]
fn bindgen_test_layout_RedisModuleCommandInfoVersion() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandInfoVersion> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandInfoVersion>(),
        32usize,
        concat!("Size of: ", stringify!(RedisModuleCommandInfoVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandInfoVersion>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleCommandInfoVersion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfoVersion),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeof_historyentry) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfoVersion),
            "::",
            stringify!(sizeof_historyentry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeof_keyspec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfoVersion),
            "::",
            stringify!(sizeof_keyspec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeof_arg) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfoVersion),
            "::",
            stringify!(sizeof_arg)
        )
    );
}
extern "C" {
    pub static RedisModule_CurrentCommandInfoVersion: RedisModuleCommandInfoVersion;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandInfo {
    pub version: *const RedisModuleCommandInfoVersion,
    pub summary: *const ::std::os::raw::c_char,
    pub complexity: *const ::std::os::raw::c_char,
    pub since: *const ::std::os::raw::c_char,
    pub history: *mut RedisModuleCommandHistoryEntry,
    pub tips: *const ::std::os::raw::c_char,
    pub arity: ::std::os::raw::c_int,
    pub key_specs: *mut RedisModuleCommandKeySpec,
    pub args: *mut RedisModuleCommandArg,
}
#[test]
fn bindgen_test_layout_RedisModuleCommandInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCommandInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCommandInfo>(),
        72usize,
        concat!("Size of: ", stringify!(RedisModuleCommandInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCommandInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleCommandInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).summary) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfo),
            "::",
            stringify!(summary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).complexity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfo),
            "::",
            stringify!(complexity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).since) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfo),
            "::",
            stringify!(since)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfo),
            "::",
            stringify!(history)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tips) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfo),
            "::",
            stringify!(tips)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arity) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfo),
            "::",
            stringify!(arity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_specs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfo),
            "::",
            stringify!(key_specs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCommandInfo),
            "::",
            stringify!(args)
        )
    );
}
pub type RedisModuleEventLoopFunc = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
        mask: ::std::os::raw::c_int,
    ),
>;
pub type RedisModuleEventLoopOneShotFunc =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleEvent {
    pub id: u64,
    pub dataver: u64,
}
#[test]
fn bindgen_test_layout_RedisModuleEvent() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleEvent>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleEvent),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataver) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleEvent),
            "::",
            stringify!(dataver)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCtx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleDefragCtx {
    _unused: [u8; 0],
}
pub type RedisModuleEventCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        eid: RedisModuleEvent,
        subevent: u64,
        data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static RedisModuleEvent_ReplicationRoleChanged: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_Persistence: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_FlushDB: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_Loading: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_ClientChange: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_Shutdown: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_ReplicaChange: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_CronLoop: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_MasterLinkChange: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_ModuleChange: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_LoadingProgress: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_SwapDB: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_ReplBackup: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_ReplAsyncLoad: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_ForkChild: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_EventLoop: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_Config: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_Key: RedisModuleEvent;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleClientInfo {
    pub version: u64,
    pub flags: u64,
    pub id: u64,
    pub addr: [::std::os::raw::c_char; 46usize],
    pub port: u16,
    pub db: u16,
}
#[test]
fn bindgen_test_layout_RedisModuleClientInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleClientInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleClientInfo>(),
        80usize,
        concat!("Size of: ", stringify!(RedisModuleClientInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleClientInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleClientInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).db) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(db)
        )
    );
}
pub type RedisModuleClientInfoV1 = RedisModuleClientInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleReplicationInfo {
    pub version: u64,
    pub master: ::std::os::raw::c_int,
    pub masterhost: *mut ::std::os::raw::c_char,
    pub masterport: ::std::os::raw::c_int,
    pub replid1: *mut ::std::os::raw::c_char,
    pub replid2: *mut ::std::os::raw::c_char,
    pub repl1_offset: u64,
    pub repl2_offset: u64,
}
#[test]
fn bindgen_test_layout_RedisModuleReplicationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleReplicationInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleReplicationInfo>(),
        64usize,
        concat!("Size of: ", stringify!(RedisModuleReplicationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleReplicationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleReplicationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).masterhost) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(masterhost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).masterport) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(masterport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replid1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(replid1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replid2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(replid2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repl1_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(repl1_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repl2_offset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(repl2_offset)
        )
    );
}
pub type RedisModuleReplicationInfoV1 = RedisModuleReplicationInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleFlushInfo {
    pub version: u64,
    pub sync: i32,
    pub dbnum: i32,
}
#[test]
fn bindgen_test_layout_RedisModuleFlushInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleFlushInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleFlushInfo>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleFlushInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleFlushInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleFlushInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleFlushInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleFlushInfo),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbnum) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleFlushInfo),
            "::",
            stringify!(dbnum)
        )
    );
}
pub type RedisModuleFlushInfoV1 = RedisModuleFlushInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleModuleChange {
    pub version: u64,
    pub module_name: *const ::std::os::raw::c_char,
    pub module_version: i32,
}
#[test]
fn bindgen_test_layout_RedisModuleModuleChange() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleModuleChange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleModuleChange>(),
        24usize,
        concat!("Size of: ", stringify!(RedisModuleModuleChange))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleModuleChange>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleModuleChange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleModuleChange),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleModuleChange),
            "::",
            stringify!(module_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleModuleChange),
            "::",
            stringify!(module_version)
        )
    );
}
pub type RedisModuleModuleChangeV1 = RedisModuleModuleChange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleConfigChange {
    pub version: u64,
    pub num_changes: u32,
    pub config_names: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RedisModuleConfigChange() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleConfigChange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleConfigChange>(),
        24usize,
        concat!("Size of: ", stringify!(RedisModuleConfigChange))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleConfigChange>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleConfigChange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleConfigChange),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_changes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleConfigChange),
            "::",
            stringify!(num_changes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_names) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleConfigChange),
            "::",
            stringify!(config_names)
        )
    );
}
pub type RedisModuleConfigChangeV1 = RedisModuleConfigChange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCronLoopInfo {
    pub version: u64,
    pub hz: i32,
}
#[test]
fn bindgen_test_layout_RedisModuleCronLoopInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleCronLoopInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCronLoopInfo>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleCronLoopInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCronLoopInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleCronLoopInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCronLoopInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCronLoopInfo),
            "::",
            stringify!(hz)
        )
    );
}
pub type RedisModuleCronLoopV1 = RedisModuleCronLoopInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleLoadingProgressInfo {
    pub version: u64,
    pub hz: i32,
    pub progress: i32,
}
#[test]
fn bindgen_test_layout_RedisModuleLoadingProgressInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleLoadingProgressInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleLoadingProgressInfo>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleLoadingProgressInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleLoadingProgressInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleLoadingProgressInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleLoadingProgressInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleLoadingProgressInfo),
            "::",
            stringify!(hz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleLoadingProgressInfo),
            "::",
            stringify!(progress)
        )
    );
}
pub type RedisModuleLoadingProgressV1 = RedisModuleLoadingProgressInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleSwapDbInfo {
    pub version: u64,
    pub dbnum_first: i32,
    pub dbnum_second: i32,
}
#[test]
fn bindgen_test_layout_RedisModuleSwapDbInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleSwapDbInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleSwapDbInfo>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleSwapDbInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleSwapDbInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleSwapDbInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleSwapDbInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbnum_first) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleSwapDbInfo),
            "::",
            stringify!(dbnum_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbnum_second) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleSwapDbInfo),
            "::",
            stringify!(dbnum_second)
        )
    );
}
pub type RedisModuleSwapDbInfoV1 = RedisModuleSwapDbInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleKeyInfo {
    pub version: u64,
    pub key: *mut RedisModuleKey,
}
#[test]
fn bindgen_test_layout_RedisModuleKeyInfo() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleKeyInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleKeyInfo>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleKeyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleKeyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleKeyInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleKeyInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleKeyInfo),
            "::",
            stringify!(key)
        )
    );
}
pub type RedisModuleKeyInfoV1 = RedisModuleKeyInfo;
pub const RedisModuleACLLogEntryReason_REDISMODULE_ACL_LOG_AUTH: RedisModuleACLLogEntryReason = 0;
pub const RedisModuleACLLogEntryReason_REDISMODULE_ACL_LOG_CMD: RedisModuleACLLogEntryReason = 1;
pub const RedisModuleACLLogEntryReason_REDISMODULE_ACL_LOG_KEY: RedisModuleACLLogEntryReason = 2;
pub const RedisModuleACLLogEntryReason_REDISMODULE_ACL_LOG_CHANNEL: RedisModuleACLLogEntryReason =
    3;
pub type RedisModuleACLLogEntryReason = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleIO {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleDigest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleInfoCtx {
    _unused: [u8; 0],
}
pub type RedisModuleInfoFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut RedisModuleInfoCtx, for_crash_report: ::std::os::raw::c_int),
>;
pub type RedisModuleDefragFunc =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut RedisModuleDefragCtx)>;
pub type RedisModuleUserChangedFunc = ::std::option::Option<
    unsafe extern "C" fn(client_id: u64, privdata: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommand {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCallReply {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleType {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleBlockedClient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleClusterInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleDict {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleDictIter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandFilterCtx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleServerInfoData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleScanCursor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleUser {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleKeyOptCtx {
    _unused: [u8; 0],
}
pub type RedisModuleCmdFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        argv: *mut *mut RedisModuleString,
        argc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleDisconnectFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut RedisModuleCtx, bc: *mut RedisModuleBlockedClient),
>;
pub type RedisModuleNotificationFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        type_: ::std::os::raw::c_int,
        event: *const ::std::os::raw::c_char,
        key: *mut RedisModuleString,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModulePostNotificationJobFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut RedisModuleCtx, pd: *mut ::std::os::raw::c_void),
>;
pub type RedisModuleTypeLoadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        rdb: *mut RedisModuleIO,
        encver: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RedisModuleTypeSaveFunc = ::std::option::Option<
    unsafe extern "C" fn(rdb: *mut RedisModuleIO, value: *mut ::std::os::raw::c_void),
>;
pub type RedisModuleTypeAuxLoadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        rdb: *mut RedisModuleIO,
        encver: ::std::os::raw::c_int,
        when: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleTypeAuxSaveFunc = ::std::option::Option<
    unsafe extern "C" fn(rdb: *mut RedisModuleIO, when: ::std::os::raw::c_int),
>;
pub type RedisModuleTypeRewriteFunc = ::std::option::Option<
    unsafe extern "C" fn(
        aof: *mut RedisModuleIO,
        key: *mut RedisModuleString,
        value: *mut ::std::os::raw::c_void,
    ),
>;
pub type RedisModuleTypeMemUsageFunc =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> usize>;
pub type RedisModuleTypeMemUsageFunc2 = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleKeyOptCtx,
        value: *const ::std::os::raw::c_void,
        sample_size: usize,
    ) -> usize,
>;
pub type RedisModuleTypeDigestFunc = ::std::option::Option<
    unsafe extern "C" fn(digest: *mut RedisModuleDigest, value: *mut ::std::os::raw::c_void),
>;
pub type RedisModuleTypeFreeFunc =
    ::std::option::Option<unsafe extern "C" fn(value: *mut ::std::os::raw::c_void)>;
pub type RedisModuleTypeFreeEffortFunc = ::std::option::Option<
    unsafe extern "C" fn(
        key: *mut RedisModuleString,
        value: *const ::std::os::raw::c_void,
    ) -> usize,
>;
pub type RedisModuleTypeFreeEffortFunc2 = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleKeyOptCtx,
        value: *const ::std::os::raw::c_void,
    ) -> usize,
>;
pub type RedisModuleTypeUnlinkFunc = ::std::option::Option<
    unsafe extern "C" fn(key: *mut RedisModuleString, value: *const ::std::os::raw::c_void),
>;
pub type RedisModuleTypeUnlinkFunc2 = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut RedisModuleKeyOptCtx, value: *const ::std::os::raw::c_void),
>;
pub type RedisModuleTypeCopyFunc = ::std::option::Option<
    unsafe extern "C" fn(
        fromkey: *mut RedisModuleString,
        tokey: *mut RedisModuleString,
        value: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RedisModuleTypeCopyFunc2 = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleKeyOptCtx,
        value: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RedisModuleTypeDefragFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleDefragCtx,
        key: *mut RedisModuleString,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleClusterMessageReceiver = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        sender_id: *const ::std::os::raw::c_char,
        type_: u8,
        payload: *const ::std::os::raw::c_uchar,
        len: u32,
    ),
>;
pub type RedisModuleTimerProc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut RedisModuleCtx, data: *mut ::std::os::raw::c_void),
>;
pub type RedisModuleCommandFilterFunc =
    ::std::option::Option<unsafe extern "C" fn(filter: *mut RedisModuleCommandFilterCtx)>;
pub type RedisModuleForkDoneHandler = ::std::option::Option<
    unsafe extern "C" fn(
        exitcode: ::std::os::raw::c_int,
        bysignal: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type RedisModuleScanCB = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        keyname: *mut RedisModuleString,
        key: *mut RedisModuleKey,
        privdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type RedisModuleScanKeyCB = ::std::option::Option<
    unsafe extern "C" fn(
        key: *mut RedisModuleKey,
        field: *mut RedisModuleString,
        value: *mut RedisModuleString,
        privdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type RedisModuleConfigGetStringFunc = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        privdata: *mut ::std::os::raw::c_void,
    ) -> *mut RedisModuleString,
>;
pub type RedisModuleConfigGetNumericFunc = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        privdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_longlong,
>;
pub type RedisModuleConfigGetBoolFunc = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        privdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleConfigGetEnumFunc = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        privdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleConfigSetStringFunc = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        val: *mut RedisModuleString,
        privdata: *mut ::std::os::raw::c_void,
        err: *mut *mut RedisModuleString,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleConfigSetNumericFunc = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_longlong,
        privdata: *mut ::std::os::raw::c_void,
        err: *mut *mut RedisModuleString,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleConfigSetBoolFunc = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
        privdata: *mut ::std::os::raw::c_void,
        err: *mut *mut RedisModuleString,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleConfigSetEnumFunc = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
        privdata: *mut ::std::os::raw::c_void,
        err: *mut *mut RedisModuleString,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleConfigApplyFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        privdata: *mut ::std::os::raw::c_void,
        err: *mut *mut RedisModuleString,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleOnUnblocked = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        reply: *mut RedisModuleCallReply,
        private_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type RedisModuleAuthCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        username: *mut RedisModuleString,
        password: *mut RedisModuleString,
        err: *mut *mut RedisModuleString,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleTypeMethods {
    pub version: u64,
    pub rdb_load: RedisModuleTypeLoadFunc,
    pub rdb_save: RedisModuleTypeSaveFunc,
    pub aof_rewrite: RedisModuleTypeRewriteFunc,
    pub mem_usage: RedisModuleTypeMemUsageFunc,
    pub digest: RedisModuleTypeDigestFunc,
    pub free: RedisModuleTypeFreeFunc,
    pub aux_load: RedisModuleTypeAuxLoadFunc,
    pub aux_save: RedisModuleTypeAuxSaveFunc,
    pub aux_save_triggers: ::std::os::raw::c_int,
    pub free_effort: RedisModuleTypeFreeEffortFunc,
    pub unlink: RedisModuleTypeUnlinkFunc,
    pub copy: RedisModuleTypeCopyFunc,
    pub defrag: RedisModuleTypeDefragFunc,
    pub mem_usage2: RedisModuleTypeMemUsageFunc2,
    pub free_effort2: RedisModuleTypeFreeEffortFunc2,
    pub unlink2: RedisModuleTypeUnlinkFunc2,
    pub copy2: RedisModuleTypeCopyFunc2,
    pub aux_save2: RedisModuleTypeAuxSaveFunc,
}
#[test]
fn bindgen_test_layout_RedisModuleTypeMethods() {
    const UNINIT: ::std::mem::MaybeUninit<RedisModuleTypeMethods> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RedisModuleTypeMethods>(),
        152usize,
        concat!("Size of: ", stringify!(RedisModuleTypeMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleTypeMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleTypeMethods))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdb_load) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(rdb_load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdb_save) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(rdb_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aof_rewrite) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(aof_rewrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_usage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(mem_usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_load) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(aux_load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_save) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(aux_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_save_triggers) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(aux_save_triggers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_effort) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(free_effort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlink) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defrag) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(defrag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_usage2) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(mem_usage2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_effort2) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(free_effort2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlink2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(unlink2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy2) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(copy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_save2) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(aux_save2)
        )
    );
}
extern "C" {
    pub static mut RedisModule_Alloc:
        ::std::option::Option<unsafe extern "C" fn(bytes: usize) -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    pub static mut RedisModule_TryAlloc:
        ::std::option::Option<unsafe extern "C" fn(bytes: usize) -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    pub static mut RedisModule_Realloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            bytes: usize,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_Free:
        ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
}
extern "C" {
    pub static mut RedisModule_Calloc: ::std::option::Option<
        unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_Strdup: ::std::option::Option<
        unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_GetApi: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            cmdfunc: RedisModuleCmdFunc,
            strflags: *const ::std::os::raw::c_char,
            firstkey: ::std::os::raw::c_int,
            lastkey: ::std::os::raw::c_int,
            keystep: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
        ) -> *mut RedisModuleCommand,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateSubcommand: ::std::option::Option<
        unsafe extern "C" fn(
            parent: *mut RedisModuleCommand,
            name: *const ::std::os::raw::c_char,
            cmdfunc: RedisModuleCmdFunc,
            strflags: *const ::std::os::raw::c_char,
            firstkey: ::std::os::raw::c_int,
            lastkey: ::std::os::raw::c_int,
            keystep: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetCommandInfo: ::std::option::Option<
        unsafe extern "C" fn(
            command: *mut RedisModuleCommand,
            info: *const RedisModuleCommandInfo,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetCommandACLCategories: ::std::option::Option<
        unsafe extern "C" fn(
            command: *mut RedisModuleCommand,
            ctgrsflags: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetModuleAttribs: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            ver: ::std::os::raw::c_int,
            apiver: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_IsModuleNameBusy: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_WrongArity: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithLongLong: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            ll: ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetSelectedDb: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SelectDb: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            newid: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_KeyExists: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            keyname: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_OpenKey: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            keyname: *mut RedisModuleString,
            mode: ::std::os::raw::c_int,
        ) -> *mut RedisModuleKey,
    >;
}
extern "C" {
    pub static mut RedisModule_GetOpenKeyModesAll:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut RedisModule_CloseKey:
        ::std::option::Option<unsafe extern "C" fn(kp: *mut RedisModuleKey)>;
}
extern "C" {
    pub static mut RedisModule_KeyType: ::std::option::Option<
        unsafe extern "C" fn(kp: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ValueLength:
        ::std::option::Option<unsafe extern "C" fn(kp: *mut RedisModuleKey) -> usize>;
}
extern "C" {
    pub static mut RedisModule_ListPush: ::std::option::Option<
        unsafe extern "C" fn(
            kp: *mut RedisModuleKey,
            where_: ::std::os::raw::c_int,
            ele: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ListPop: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            where_: ::std::os::raw::c_int,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ListGet: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            index: ::std::os::raw::c_long,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ListSet: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            index: ::std::os::raw::c_long,
            value: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ListInsert: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            index: ::std::os::raw::c_long,
            value: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ListDelete: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            index: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_Call: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            cmdname: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ) -> *mut RedisModuleCallReply,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyProto: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            len: *mut usize,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeCallReply:
        ::std::option::Option<unsafe extern "C" fn(reply: *mut RedisModuleCallReply)>;
}
extern "C" {
    pub static mut RedisModule_CallReplyType: ::std::option::Option<
        unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyInteger: ::std::option::Option<
        unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> ::std::os::raw::c_longlong,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyDouble:
        ::std::option::Option<unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> f64>;
}
extern "C" {
    pub static mut RedisModule_CallReplyBool: ::std::option::Option<
        unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyBigNumber: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            len: *mut usize,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyVerbatim: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            len: *mut usize,
            format: *mut *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplySetElement: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            idx: usize,
        ) -> *mut RedisModuleCallReply,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyMapElement: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            idx: usize,
            key: *mut *mut RedisModuleCallReply,
            val: *mut *mut RedisModuleCallReply,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyAttributeElement: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            idx: usize,
            key: *mut *mut RedisModuleCallReply,
            val: *mut *mut RedisModuleCallReply,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyPromiseSetUnblockHandler: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            on_unblock: RedisModuleOnUnblocked,
            private_data: *mut ::std::os::raw::c_void,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyPromiseAbort: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            private_data: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyAttribute: ::std::option::Option<
        unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> *mut RedisModuleCallReply,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyLength:
        ::std::option::Option<unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> usize>;
}
extern "C" {
    pub static mut RedisModule_CallReplyArrayElement: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            idx: usize,
        ) -> *mut RedisModuleCallReply,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            ptr: *const ::std::os::raw::c_char,
            len: usize,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromLongLong: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            ll: ::std::os::raw::c_longlong,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromULongLong: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            ull: ::std::os::raw::c_ulonglong,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromDouble: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, d: f64) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            str_: *const RedisModuleString,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromStreamID: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            id: *const RedisModuleStreamID,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringPrintf: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            fmt: *const ::std::os::raw::c_char,
            ...
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeString: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, str_: *mut RedisModuleString),
    >;
}
extern "C" {
    pub static mut RedisModule_StringPtrLen: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const RedisModuleString,
            len: *mut usize,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithError: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            err: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithSimpleString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            msg: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithArray: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            len: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithMap: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            len: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithSet: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            len: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithAttribute: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            len: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithNullArray: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithEmptyArray: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplySetArrayLength: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, len: ::std::os::raw::c_long),
    >;
}
extern "C" {
    pub static mut RedisModule_ReplySetMapLength: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, len: ::std::os::raw::c_long),
    >;
}
extern "C" {
    pub static mut RedisModule_ReplySetSetLength: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, len: ::std::os::raw::c_long),
    >;
}
extern "C" {
    pub static mut RedisModule_ReplySetAttributeLength: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, len: ::std::os::raw::c_long),
    >;
}
extern "C" {
    pub static mut RedisModule_ReplySetPushLength: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, len: ::std::os::raw::c_long),
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithStringBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            buf: *const ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithCString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            buf: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            str_: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithEmptyString: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithVerbatimString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            buf: *const ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithVerbatimStringType: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            buf: *const ::std::os::raw::c_char,
            len: usize,
            ext: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithNull: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithBool: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            b: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithDouble: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, d: f64) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithBigNumber: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            bignum: *const ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithCallReply: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            reply: *mut RedisModuleCallReply,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringToLongLong: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const RedisModuleString,
            ll: *mut ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringToULongLong: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const RedisModuleString,
            ull: *mut ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringToDouble: ::std::option::Option<
        unsafe extern "C" fn(str_: *const RedisModuleString, d: *mut f64) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringToStreamID: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const RedisModuleString,
            id: *mut RedisModuleStreamID,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_AutoMemory:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut RedisModuleCtx)>;
}
extern "C" {
    pub static mut RedisModule_Replicate: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            cmdname: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplicateVerbatim: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyStringPtr: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            len: *mut usize,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromCallReply: ::std::option::Option<
        unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_DeleteKey: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_UnlinkKey: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringSet: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            str_: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringDMA: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            len: *mut usize,
            mode: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_StringTruncate: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey, newlen: usize) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetExpire:
        ::std::option::Option<unsafe extern "C" fn(key: *mut RedisModuleKey) -> mstime_t>;
}
extern "C" {
    pub static mut RedisModule_SetExpire: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey, expire: mstime_t) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetAbsExpire:
        ::std::option::Option<unsafe extern "C" fn(key: *mut RedisModuleKey) -> mstime_t>;
}
extern "C" {
    pub static mut RedisModule_SetAbsExpire: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey, expire: mstime_t) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ResetDataset: ::std::option::Option<
        unsafe extern "C" fn(restart_aof: ::std::os::raw::c_int, async_: ::std::os::raw::c_int),
    >;
}
extern "C" {
    pub static mut RedisModule_DbSize: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_ulonglong,
    >;
}
extern "C" {
    pub static mut RedisModule_RandomKey: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetAdd: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            score: f64,
            ele: *mut RedisModuleString,
            flagsptr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetIncrby: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            score: f64,
            ele: *mut RedisModuleString,
            flagsptr: *mut ::std::os::raw::c_int,
            newscore: *mut f64,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetScore: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            ele: *mut RedisModuleString,
            score: *mut f64,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRem: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            ele: *mut RedisModuleString,
            deleted: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangeStop:
        ::std::option::Option<unsafe extern "C" fn(key: *mut RedisModuleKey)>;
}
extern "C" {
    pub static mut RedisModule_ZsetFirstInScoreRange: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            min: f64,
            max: f64,
            minex: ::std::os::raw::c_int,
            maxex: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetLastInScoreRange: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            min: f64,
            max: f64,
            minex: ::std::os::raw::c_int,
            maxex: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetFirstInLexRange: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            min: *mut RedisModuleString,
            max: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetLastInLexRange: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            min: *mut RedisModuleString,
            max: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangeCurrentElement: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey, score: *mut f64) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangeNext: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangePrev: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangeEndReached: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_HashSet: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            flags: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_HashGet: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            flags: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StreamAdd: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            flags: ::std::os::raw::c_int,
            id: *mut RedisModuleStreamID,
            argv: *mut *mut RedisModuleString,
            numfields: i64,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StreamDelete: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            id: *mut RedisModuleStreamID,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StreamIteratorStart: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            flags: ::std::os::raw::c_int,
            startid: *mut RedisModuleStreamID,
            endid: *mut RedisModuleStreamID,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StreamIteratorStop: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StreamIteratorNextID: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            id: *mut RedisModuleStreamID,
            numfields: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StreamIteratorNextField: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            field_ptr: *mut *mut RedisModuleString,
            value_ptr: *mut *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StreamIteratorDelete: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StreamTrimByLength: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            flags: ::std::os::raw::c_int,
            length: ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_longlong,
    >;
}
extern "C" {
    pub static mut RedisModule_StreamTrimByID: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            flags: ::std::os::raw::c_int,
            id: *mut RedisModuleStreamID,
        ) -> ::std::os::raw::c_longlong,
    >;
}
extern "C" {
    pub static mut RedisModule_IsKeysPositionRequest: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_KeyAtPos: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, pos: ::std::os::raw::c_int),
    >;
}
extern "C" {
    pub static mut RedisModule_KeyAtPosWithFlags: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            pos: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_IsChannelsPositionRequest: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ChannelAtPosWithFlags: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            pos: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_GetClientId: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_ulonglong,
    >;
}
extern "C" {
    pub static mut RedisModule_GetClientUserNameById: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, id: u64) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_GetClientInfoById: ::std::option::Option<
        unsafe extern "C" fn(ci: *mut ::std::os::raw::c_void, id: u64) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetClientNameById: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, id: u64) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_SetClientNameById: ::std::option::Option<
        unsafe extern "C" fn(id: u64, name: *mut RedisModuleString) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_PublishMessage: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            channel: *mut RedisModuleString,
            message: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_PublishMessageShard: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            channel: *mut RedisModuleString,
            message: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetContextFlags: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_AvoidReplicaTraffic:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut RedisModule_PoolAlloc: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, bytes: usize) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateDataType: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            encver: ::std::os::raw::c_int,
            typemethods: *mut RedisModuleTypeMethods,
        ) -> *mut RedisModuleType,
    >;
}
extern "C" {
    pub static mut RedisModule_ModuleTypeSetValue: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            mt: *mut RedisModuleType,
            value: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ModuleTypeReplaceValue: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            mt: *mut RedisModuleType,
            new_value: *mut ::std::os::raw::c_void,
            old_value: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ModuleTypeGetType: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> *mut RedisModuleType,
    >;
}
extern "C" {
    pub static mut RedisModule_ModuleTypeGetValue: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_IsIOError: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RedisModuleIO) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetModuleOptions: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, options: ::std::os::raw::c_int),
    >;
}
extern "C" {
    pub static mut RedisModule_SignalModifiedKey: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            keyname: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SaveUnsigned:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO, value: u64)>;
}
extern "C" {
    pub static mut RedisModule_LoadUnsigned:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> u64>;
}
extern "C" {
    pub static mut RedisModule_SaveSigned:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO, value: i64)>;
}
extern "C" {
    pub static mut RedisModule_LoadSigned:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> i64>;
}
extern "C" {
    pub static mut RedisModule_EmitAOF: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RedisModuleIO,
            cmdname: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_SaveString: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RedisModuleIO, s: *mut RedisModuleString),
    >;
}
extern "C" {
    pub static mut RedisModule_SaveStringBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RedisModuleIO,
            str_: *const ::std::os::raw::c_char,
            len: usize,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_LoadString: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RedisModuleIO) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_LoadStringBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RedisModuleIO,
            lenptr: *mut usize,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_SaveDouble:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO, value: f64)>;
}
extern "C" {
    pub static mut RedisModule_LoadDouble:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> f64>;
}
extern "C" {
    pub static mut RedisModule_SaveFloat:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO, value: f32)>;
}
extern "C" {
    pub static mut RedisModule_LoadFloat:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> f32>;
}
extern "C" {
    pub static mut RedisModule_LoadDataTypeFromString: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const RedisModuleString,
            mt: *const RedisModuleType,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_LoadDataTypeFromStringEncver: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const RedisModuleString,
            mt: *const RedisModuleType,
            encver: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_SaveDataTypeToString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            data: *mut ::std::os::raw::c_void,
            mt: *const RedisModuleType,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_Log: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            level: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_LogIOError: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RedisModuleIO,
            levelstr: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ),
    >;
}
extern "C" {
    pub static mut RedisModule__Assert: ::std::option::Option<
        unsafe extern "C" fn(
            estr: *const ::std::os::raw::c_char,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_LatencyAddSample: ::std::option::Option<
        unsafe extern "C" fn(event: *const ::std::os::raw::c_char, latency: mstime_t),
    >;
}
extern "C" {
    pub static mut RedisModule_StringAppendBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            str_: *mut RedisModuleString,
            buf: *const ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_TrimStringAllocation:
        ::std::option::Option<unsafe extern "C" fn(str_: *mut RedisModuleString)>;
}
extern "C" {
    pub static mut RedisModule_RetainString: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, str_: *mut RedisModuleString),
    >;
}
extern "C" {
    pub static mut RedisModule_HoldString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            str_: *mut RedisModuleString,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_StringCompare: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const RedisModuleString,
            b: *const RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetContextFromIO:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> *mut RedisModuleCtx>;
}
extern "C" {
    pub static mut RedisModule_GetKeyNameFromIO: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RedisModuleIO) -> *const RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_GetKeyNameFromModuleKey: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> *const RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_GetDbIdFromModuleKey: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetDbIdFromIO: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RedisModuleIO) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetDbIdFromOptCtx: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleKeyOptCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetToDbIdFromOptCtx: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleKeyOptCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetKeyNameFromOptCtx: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleKeyOptCtx) -> *const RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_GetToKeyNameFromOptCtx: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleKeyOptCtx) -> *const RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_Milliseconds:
        ::std::option::Option<unsafe extern "C" fn() -> mstime_t>;
}
extern "C" {
    pub static mut RedisModule_MonotonicMicroseconds:
        ::std::option::Option<unsafe extern "C" fn() -> u64>;
}
extern "C" {
    pub static mut RedisModule_Microseconds:
        ::std::option::Option<unsafe extern "C" fn() -> ustime_t>;
}
extern "C" {
    pub static mut RedisModule_CachedMicroseconds:
        ::std::option::Option<unsafe extern "C" fn() -> ustime_t>;
}
extern "C" {
    pub static mut RedisModule_DigestAddStringBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            md: *mut RedisModuleDigest,
            ele: *const ::std::os::raw::c_char,
            len: usize,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_DigestAddLongLong: ::std::option::Option<
        unsafe extern "C" fn(md: *mut RedisModuleDigest, ele: ::std::os::raw::c_longlong),
    >;
}
extern "C" {
    pub static mut RedisModule_DigestEndSequence:
        ::std::option::Option<unsafe extern "C" fn(md: *mut RedisModuleDigest)>;
}
extern "C" {
    pub static mut RedisModule_GetDbIdFromDigest: ::std::option::Option<
        unsafe extern "C" fn(dig: *mut RedisModuleDigest) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetKeyNameFromDigest: ::std::option::Option<
        unsafe extern "C" fn(dig: *mut RedisModuleDigest) -> *const RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateDict: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut RedisModuleDict,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeDict: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, d: *mut RedisModuleDict),
    >;
}
extern "C" {
    pub static mut RedisModule_DictSize:
        ::std::option::Option<unsafe extern "C" fn(d: *mut RedisModuleDict) -> u64>;
}
extern "C" {
    pub static mut RedisModule_DictSetC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
            ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictReplaceC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
            ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictSet: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut RedisModuleString,
            ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictReplace: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut RedisModuleString,
            ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictGetC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
            nokey: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_DictGet: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut RedisModuleString,
            nokey: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_DictDelC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
            oldval: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictDel: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut RedisModuleString,
            oldval: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictIteratorStartC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            op: *const ::std::os::raw::c_char,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
        ) -> *mut RedisModuleDictIter,
    >;
}
extern "C" {
    pub static mut RedisModule_DictIteratorStart: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            op: *const ::std::os::raw::c_char,
            key: *mut RedisModuleString,
        ) -> *mut RedisModuleDictIter,
    >;
}
extern "C" {
    pub static mut RedisModule_DictIteratorStop:
        ::std::option::Option<unsafe extern "C" fn(di: *mut RedisModuleDictIter)>;
}
extern "C" {
    pub static mut RedisModule_DictIteratorReseekC: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            op: *const ::std::os::raw::c_char,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictIteratorReseek: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            op: *const ::std::os::raw::c_char,
            key: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictNextC: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            keylen: *mut usize,
            dataptr: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_DictPrevC: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            keylen: *mut usize,
            dataptr: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_DictNext: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            di: *mut RedisModuleDictIter,
            dataptr: *mut *mut ::std::os::raw::c_void,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_DictPrev: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            di: *mut RedisModuleDictIter,
            dataptr: *mut *mut ::std::os::raw::c_void,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_DictCompareC: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            op: *const ::std::os::raw::c_char,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictCompare: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            op: *const ::std::os::raw::c_char,
            key: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterInfoFunc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            cb: RedisModuleInfoFunc,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterAuthCallback: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, cb: RedisModuleAuthCallback),
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddSection: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoBeginDictField: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoEndDictField: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleInfoCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *const ::std::os::raw::c_char,
            value: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldCString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldDouble: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *const ::std::os::raw::c_char,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldLongLong: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldULongLong: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetServerInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            section: *const ::std::os::raw::c_char,
        ) -> *mut RedisModuleServerInfoData,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeServerInfo: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, data: *mut RedisModuleServerInfoData),
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetField: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetFieldC: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetFieldSigned: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
            out_err: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetFieldUnsigned: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
            out_err: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetFieldDouble: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
            out_err: *mut ::std::os::raw::c_int,
        ) -> f64,
    >;
}
extern "C" {
    pub static mut RedisModule_SubscribeToServerEvent: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            event: RedisModuleEvent,
            callback: RedisModuleEventCallback,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetLRU: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey, lru_idle: mstime_t) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetLRU: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            lru_idle: *mut mstime_t,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetLFU: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            lfu_freq: ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetLFU: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            lfu_freq: *mut ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_BlockClientOnKeys: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            reply_callback: RedisModuleCmdFunc,
            timeout_callback: RedisModuleCmdFunc,
            free_privdata: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut RedisModuleCtx, arg2: *mut ::std::os::raw::c_void),
            >,
            timeout_ms: ::std::os::raw::c_longlong,
            keys: *mut *mut RedisModuleString,
            numkeys: ::std::os::raw::c_int,
            privdata: *mut ::std::os::raw::c_void,
        ) -> *mut RedisModuleBlockedClient,
    >;
}
extern "C" {
    pub static mut RedisModule_BlockClientOnKeysWithFlags: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            reply_callback: RedisModuleCmdFunc,
            timeout_callback: RedisModuleCmdFunc,
            free_privdata: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut RedisModuleCtx, arg2: *mut ::std::os::raw::c_void),
            >,
            timeout_ms: ::std::os::raw::c_longlong,
            keys: *mut *mut RedisModuleString,
            numkeys: ::std::os::raw::c_int,
            privdata: *mut ::std::os::raw::c_void,
            flags: ::std::os::raw::c_int,
        ) -> *mut RedisModuleBlockedClient,
    >;
}
extern "C" {
    pub static mut RedisModule_SignalKeyAsReady: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, key: *mut RedisModuleString),
    >;
}
extern "C" {
    pub static mut RedisModule_GetBlockedClientReadyKey: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ScanCursorCreate:
        ::std::option::Option<unsafe extern "C" fn() -> *mut RedisModuleScanCursor>;
}
extern "C" {
    pub static mut RedisModule_ScanCursorRestart:
        ::std::option::Option<unsafe extern "C" fn(cursor: *mut RedisModuleScanCursor)>;
}
extern "C" {
    pub static mut RedisModule_ScanCursorDestroy:
        ::std::option::Option<unsafe extern "C" fn(cursor: *mut RedisModuleScanCursor)>;
}
extern "C" {
    pub static mut RedisModule_Scan: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            cursor: *mut RedisModuleScanCursor,
            fn_: RedisModuleScanCB,
            privdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ScanKey: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            cursor: *mut RedisModuleScanCursor,
            fn_: RedisModuleScanKeyCB,
            privdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetContextFlagsAll:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut RedisModule_GetModuleOptionsAll:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut RedisModule_GetKeyspaceNotificationFlagsAll:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut RedisModule_IsSubEventSupported: ::std::option::Option<
        unsafe extern "C" fn(event: RedisModuleEvent, subevent: u64) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetServerVersion:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut RedisModule_GetTypeMethodVersion:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut RedisModule_Yield: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            flags: ::std::os::raw::c_int,
            busy_reply: *const ::std::os::raw::c_char,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_BlockClient: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            reply_callback: RedisModuleCmdFunc,
            timeout_callback: RedisModuleCmdFunc,
            free_privdata: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut RedisModuleCtx, arg2: *mut ::std::os::raw::c_void),
            >,
            timeout_ms: ::std::os::raw::c_longlong,
        ) -> *mut RedisModuleBlockedClient,
    >;
}
extern "C" {
    pub static mut RedisModule_BlockClientGetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            blocked_client: *mut RedisModuleBlockedClient,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_BlockClientSetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            blocked_client: *mut RedisModuleBlockedClient,
            private_data: *mut ::std::os::raw::c_void,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_BlockClientOnAuth: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            reply_callback: RedisModuleAuthCallback,
            free_privdata: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut RedisModuleCtx, arg2: *mut ::std::os::raw::c_void),
            >,
        ) -> *mut RedisModuleBlockedClient,
    >;
}
extern "C" {
    pub static mut RedisModule_UnblockClient: ::std::option::Option<
        unsafe extern "C" fn(
            bc: *mut RedisModuleBlockedClient,
            privdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_IsBlockedReplyRequest: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_IsBlockedTimeoutRequest: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetBlockedClientPrivateData: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_GetBlockedClientHandle: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut RedisModuleBlockedClient,
    >;
}
extern "C" {
    pub static mut RedisModule_AbortBlock: ::std::option::Option<
        unsafe extern "C" fn(bc: *mut RedisModuleBlockedClient) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_BlockedClientMeasureTimeStart: ::std::option::Option<
        unsafe extern "C" fn(bc: *mut RedisModuleBlockedClient) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_BlockedClientMeasureTimeEnd: ::std::option::Option<
        unsafe extern "C" fn(bc: *mut RedisModuleBlockedClient) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetThreadSafeContext: ::std::option::Option<
        unsafe extern "C" fn(bc: *mut RedisModuleBlockedClient) -> *mut RedisModuleCtx,
    >;
}
extern "C" {
    pub static mut RedisModule_GetDetachedThreadSafeContext: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut RedisModuleCtx,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeThreadSafeContext:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut RedisModuleCtx)>;
}
extern "C" {
    pub static mut RedisModule_ThreadSafeContextLock:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut RedisModuleCtx)>;
}
extern "C" {
    pub static mut RedisModule_ThreadSafeContextTryLock: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ThreadSafeContextUnlock:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut RedisModuleCtx)>;
}
extern "C" {
    pub static mut RedisModule_SubscribeToKeyspaceEvents: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            types: ::std::os::raw::c_int,
            cb: RedisModuleNotificationFunc,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_AddPostNotificationJob: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            callback: RedisModulePostNotificationJobFunc,
            pd: *mut ::std::os::raw::c_void,
            free_pd: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_NotifyKeyspaceEvent: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            type_: ::std::os::raw::c_int,
            event: *const ::std::os::raw::c_char,
            key: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetNotifyKeyspaceEvents:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut RedisModule_BlockedClientDisconnected: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterClusterMessageReceiver: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            type_: u8,
            callback: RedisModuleClusterMessageReceiver,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_SendClusterMessage: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            target_id: *const ::std::os::raw::c_char,
            type_: u8,
            msg: *const ::std::os::raw::c_char,
            len: u32,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetClusterNodeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            id: *const ::std::os::raw::c_char,
            ip: *mut ::std::os::raw::c_char,
            master_id: *mut ::std::os::raw::c_char,
            port: *mut ::std::os::raw::c_int,
            flags: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetClusterNodesList: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            numnodes: *mut usize,
        ) -> *mut *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeClusterNodesList:
        ::std::option::Option<unsafe extern "C" fn(ids: *mut *mut ::std::os::raw::c_char)>;
}
extern "C" {
    pub static mut RedisModule_CreateTimer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            period: mstime_t,
            callback: RedisModuleTimerProc,
            data: *mut ::std::os::raw::c_void,
        ) -> RedisModuleTimerID,
    >;
}
extern "C" {
    pub static mut RedisModule_StopTimer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            id: RedisModuleTimerID,
            data: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetTimerInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            id: RedisModuleTimerID,
            remaining: *mut u64,
            data: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetMyClusterID:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
}
extern "C" {
    pub static mut RedisModule_GetClusterSize:
        ::std::option::Option<unsafe extern "C" fn() -> usize>;
}
extern "C" {
    pub static mut RedisModule_GetRandomBytes:
        ::std::option::Option<unsafe extern "C" fn(dst: *mut ::std::os::raw::c_uchar, len: usize)>;
}
extern "C" {
    pub static mut RedisModule_GetRandomHexChars:
        ::std::option::Option<unsafe extern "C" fn(dst: *mut ::std::os::raw::c_char, len: usize)>;
}
extern "C" {
    pub static mut RedisModule_SetDisconnectCallback: ::std::option::Option<
        unsafe extern "C" fn(
            bc: *mut RedisModuleBlockedClient,
            callback: RedisModuleDisconnectFunc,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_SetClusterFlags:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut RedisModuleCtx, flags: u64)>;
}
extern "C" {
    pub static mut RedisModule_ExportSharedAPI: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            apiname: *const ::std::os::raw::c_char,
            func: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetSharedAPI: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            apiname: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterCommandFilter: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            cb: RedisModuleCommandFilterFunc,
            flags: ::std::os::raw::c_int,
        ) -> *mut RedisModuleCommandFilter,
    >;
}
extern "C" {
    pub static mut RedisModule_UnregisterCommandFilter: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            filter: *mut RedisModuleCommandFilter,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CommandFilterArgsCount: ::std::option::Option<
        unsafe extern "C" fn(fctx: *mut RedisModuleCommandFilterCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CommandFilterArgGet: ::std::option::Option<
        unsafe extern "C" fn(
            fctx: *mut RedisModuleCommandFilterCtx,
            pos: ::std::os::raw::c_int,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CommandFilterArgInsert: ::std::option::Option<
        unsafe extern "C" fn(
            fctx: *mut RedisModuleCommandFilterCtx,
            pos: ::std::os::raw::c_int,
            arg: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CommandFilterArgReplace: ::std::option::Option<
        unsafe extern "C" fn(
            fctx: *mut RedisModuleCommandFilterCtx,
            pos: ::std::os::raw::c_int,
            arg: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CommandFilterArgDelete: ::std::option::Option<
        unsafe extern "C" fn(
            fctx: *mut RedisModuleCommandFilterCtx,
            pos: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_Fork: ::std::option::Option<
        unsafe extern "C" fn(
            cb: RedisModuleForkDoneHandler,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SendChildHeartbeat:
        ::std::option::Option<unsafe extern "C" fn(progress: f64)>;
}
extern "C" {
    pub static mut RedisModule_ExitFromChild: ::std::option::Option<
        unsafe extern "C" fn(retcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_KillForkChild: ::std::option::Option<
        unsafe extern "C" fn(child_pid: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetUsedMemoryRatio:
        ::std::option::Option<unsafe extern "C" fn() -> f32>;
}
extern "C" {
    pub static mut RedisModule_MallocSize:
        ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void) -> usize>;
}
extern "C" {
    pub static mut RedisModule_MallocUsableSize:
        ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void) -> usize>;
}
extern "C" {
    pub static mut RedisModule_MallocSizeString:
        ::std::option::Option<unsafe extern "C" fn(str_: *mut RedisModuleString) -> usize>;
}
extern "C" {
    pub static mut RedisModule_MallocSizeDict:
        ::std::option::Option<unsafe extern "C" fn(dict: *mut RedisModuleDict) -> usize>;
}
extern "C" {
    pub static mut RedisModule_CreateModuleUser: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut RedisModuleUser,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeModuleUser:
        ::std::option::Option<unsafe extern "C" fn(user: *mut RedisModuleUser)>;
}
extern "C" {
    pub static mut RedisModule_SetContextUser: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, user: *const RedisModuleUser),
    >;
}
extern "C" {
    pub static mut RedisModule_SetModuleUserACL: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut RedisModuleUser,
            acl: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetModuleUserACLString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            user: *mut RedisModuleUser,
            acl: *const ::std::os::raw::c_char,
            error: *mut *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetModuleUserACLString: ::std::option::Option<
        unsafe extern "C" fn(user: *mut RedisModuleUser) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_GetCurrentUserName: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_GetModuleUserFromUserName: ::std::option::Option<
        unsafe extern "C" fn(name: *mut RedisModuleString) -> *mut RedisModuleUser,
    >;
}
extern "C" {
    pub static mut RedisModule_ACLCheckCommandPermissions: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut RedisModuleUser,
            argv: *mut *mut RedisModuleString,
            argc: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ACLCheckKeyPermissions: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut RedisModuleUser,
            key: *mut RedisModuleString,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ACLCheckChannelPermissions: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut RedisModuleUser,
            ch: *mut RedisModuleString,
            literal: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ACLAddLogEntry: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            user: *mut RedisModuleUser,
            object: *mut RedisModuleString,
            reason: RedisModuleACLLogEntryReason,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_ACLAddLogEntryByUserName: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            user: *mut RedisModuleString,
            object: *mut RedisModuleString,
            reason: RedisModuleACLLogEntryReason,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_AuthenticateClientWithACLUser: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            len: usize,
            callback: RedisModuleUserChangedFunc,
            privdata: *mut ::std::os::raw::c_void,
            client_id: *mut u64,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_AuthenticateClientWithUser: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            user: *mut RedisModuleUser,
            callback: RedisModuleUserChangedFunc,
            privdata: *mut ::std::os::raw::c_void,
            client_id: *mut u64,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DeauthenticateAndCloseClient: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, client_id: u64) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RedactClientCommandArgument: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            pos: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetClientCertificate: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, id: u64) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_GetCommandKeys: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            argv: *mut *mut RedisModuleString,
            argc: ::std::os::raw::c_int,
            num_keys: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetCommandKeysWithFlags: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            argv: *mut *mut RedisModuleString,
            argc: ::std::os::raw::c_int,
            num_keys: *mut ::std::os::raw::c_int,
            out_flags: *mut *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetCurrentCommandName: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterDefragFunc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            func: RedisModuleDefragFunc,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DefragAlloc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleDefragCtx,
            ptr: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_DefragRedisModuleString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleDefragCtx,
            str_: *mut RedisModuleString,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_DefragShouldStop: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleDefragCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DefragCursorSet: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleDefragCtx,
            cursor: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DefragCursorGet: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleDefragCtx,
            cursor: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetDbIdFromDefragCtx: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleDefragCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetKeyNameFromDefragCtx: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleDefragCtx) -> *const RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_EventLoopAdd: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            mask: ::std::os::raw::c_int,
            func: RedisModuleEventLoopFunc,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_EventLoopDel: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            mask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_EventLoopAddOneShot: ::std::option::Option<
        unsafe extern "C" fn(
            func: RedisModuleEventLoopOneShotFunc,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterBoolConfig: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            default_val: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
            getfn: RedisModuleConfigGetBoolFunc,
            setfn: RedisModuleConfigSetBoolFunc,
            applyfn: RedisModuleConfigApplyFunc,
            privdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterNumericConfig: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            default_val: ::std::os::raw::c_longlong,
            flags: ::std::os::raw::c_uint,
            min: ::std::os::raw::c_longlong,
            max: ::std::os::raw::c_longlong,
            getfn: RedisModuleConfigGetNumericFunc,
            setfn: RedisModuleConfigSetNumericFunc,
            applyfn: RedisModuleConfigApplyFunc,
            privdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterStringConfig: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            default_val: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_uint,
            getfn: RedisModuleConfigGetStringFunc,
            setfn: RedisModuleConfigSetStringFunc,
            applyfn: RedisModuleConfigApplyFunc,
            privdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterEnumConfig: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            default_val: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
            enum_values: *mut *const ::std::os::raw::c_char,
            int_values: *const ::std::os::raw::c_int,
            num_enum_vals: ::std::os::raw::c_int,
            getfn: RedisModuleConfigGetEnumFunc,
            setfn: RedisModuleConfigSetEnumFunc,
            applyfn: RedisModuleConfigApplyFunc,
            privdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_LoadConfigs: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
